# -*- coding: utf-8 -*-
"""Movie Ticket and Rating Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pwcgS8pQeoHg8i-7ngkhqoJypJ9aLGSB

Task - 2 Movie Rating Prediction

Author:- Dharanish

Batch- Feb'25
"""

# Import the Libraries for the Data Processing and Modelling
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from google.colab import files
uploaded = files.upload()

#Linking the datasets to colab
import io
df_data = pd.read_csv(io.BytesIO(uploaded['IMDb Movies India (1).csv']), encoding='latin-1')

df_data.head(10)

df_data.shape

df_data.isnull().sum()

df_data.info()

df_data.duplicated().sum()

df_data.dropna(inplace=True)

df_data.isnull().sum()

df_data.duplicated().sum()

df_data.shape

df_data.columns

print(df_data.head())  # First few rows
print(df_data.info())  # Column info and missing values

sns.histplot(df_data['Rating'], bins=20, kde=True)
plt.title('Rating Distribution')
plt.show()

print(df_data.corr(numeric_only=True)) # add the numeric_only argument
sns.heatmap(df_data.corr(numeric_only=True), annot=True, cmap='coolwarm') # add the numeric_only argument
plt.title('Correlation Heatmap')
plt.show()

"""Data Pre-Processing"""

# Convert the 'Year' column to string type before using .str
df_data['Year'] = df_data['Year'].astype(str).str.replace(r' [()]', '', regex=True)

# Now convert it back to integers
df_data['Year'] = pd.to_numeric(df_data['Year'], errors='coerce').astype('Int64')

# Remove the min word from 'Duration' column and convert all values to numeric
df_data['Duration'] = pd.to_numeric(df_data['Duration'].str.replace('min', ''))
df_data['Duration']

# Splitting the genre by, to keep only unique genres and replacing the null values with mode
df_data['Genre'] = df_data['Genre'].str.split(', ')

df_data = df_data.explode('Genre')

df_data['Genre'].fillna(df_data['Genre'].mode()[0], inplace=True)

# Convert 'Votes to numeric and replace the, to keep only numerical part
df_data['Votes'] = pd.to_numeric(df_data["Votes"].str.replace(',', ''))
df_data['Votes']

# Checking the dataset is there any null values present sent and data types of the features present
df_data.info()

df_data.describe

print(df_data.isnull().sum())

"""Data Visualizing"""

# Assuming df-data is the final DataFrame containing the 'Year' column
year = px.histogram(df_data, x='Year', histnorm='probability density', nbins=40)
year.show()

# Group data by Year and calculate the average rating
# Replace 'Genre' with the correct column name if it was changed
avg_rating_by_year = df_data.groupby(['Year','Genre'])['Rating'].mean().reset_index()

# Get the top 10 genres
top_genres = df_data['Genre'].value_counts().head(10).index

# Filter the data to include only the top 3 genres
average_rating_by_year = avg_rating_by_year[avg_rating_by_year['Genre'].isin(top_genres)]

# Create the line plot with Plotly Express
fig = px.line(average_rating_by_year, x='Year', y='Rating', color='Genre')

# Updating the details into chart like title and hue
fig.update_layout(title="Average Rating by Year for Top Genres",
                  xaxis_title="Year",
                  yaxis_title="Average Rating")

# Show the plot
fig.show()

#This histogram shows the probable density with its ratings
ratings_fig = px.histogram(df_data, x='Rating', nbins=20, histnorm='probability density')
ratings_fig.update_layout(title="Rating Distribution", xaxis_title="Rating", yaxis_title="Probability Density")
ratings_fig.show()

# Importing essential libraries for model building
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, r2_score

# Dropping Name column because it doesn't impact the outcome
df_data.drop('Name', axis=1, inplace=True)

# Grouping the columns with their average rating and then creating a new feature

genre_mean_rating = df_data.groupby('Genre')['Rating'].transform('mean')
df_data['Genre_mean_rating'] = genre_mean_rating

director_mean_rating = df_data.groupby('Director')['Rating'].transform('mean')
df_data['Director_encoded'] = director_mean_rating

actor1_mean_rating = df_data.groupby('Actor 1')['Rating'].transform('mean')
df_data['Actor1_encoded'] = actor1_mean_rating

actor2_mean_rating = df_data.groupby('Actor 2')['Rating'].transform('mean')
df_data['Actor2_encoded'] = actor2_mean_rating

actor3_mean_rating = df_data.groupby('Actor 3')['Rating'].transform('mean')
df_data['Actor3_encoded'] = actor3_mean_rating

x = df_data[['Year', 'Duration', 'Genre_mean_rating', 'Director_encoded', 'Actor1_encoded', 'Actor2_encoded', 'Actor3_encoded']]
y = df_data['Rating']

#splitting the dataset into training and testing parts
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

"""Learning the model"""

Model = LinearRegression()
Model.fit(x_train, y_train)
Model_pred = Model.predict(x_test)

#Evaluating the model performance
print('The performance of Logistic Regression is below','/n')
print('Mean Absolute Error:', mean_absolute_error(y_test, Model_pred))
print('Mean Squared Error:', mean_squared_error(y_test, Model_pred))
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, Model_pred)))
print('R2 Score:', r2_score(y_test, Model_pred))
print('Accuracy Score:', Model.score(x_test, y_test))
print('Cross Validation Score:', cross_val_score(Model, x, y, cv=5).mean())

"""Model Final Testing"""

x.head(10)

y.head(10)

#For testing, we create a new dataframe with values close to any of our existing data to evaluate.
# The columns must match those used during training (x)

data = {'Year': [2019], 'Duration': [111], 'Genre_mean_rating': [5.8],
        'Director_encoded': [4.5], 'Actor1_encoded': [5.3], 'Actor2_encoded': [4.5],
        'Actor3_encoded': [5.0]}  # Adding the missing 'Actor3_encoded' column and a sample value.

#Remove the column "Votes" as this is not a column in X
#del data["Votes"] #remove the unnecessary column Votes

trail = pd.DataFrame(data)

#predict the movie rating with given data
df_data = Model.predict(trail)

#Display the results from the model
print("Predicted rating:", df_data[0])